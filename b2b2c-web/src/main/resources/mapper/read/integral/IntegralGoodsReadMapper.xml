<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.slodon.b2b2c.dao.read.integral.IntegralGoodsReadMapper">
  <resultMap id="resultMap" type="com.slodon.b2b2c.integral.pojo.IntegralGoods">
    <id column="integral_goods_id" property="integralGoodsId" />
    <result column="goods_name" property="goodsName" />
    <result column="goods_brief" property="goodsBrief" />
    <result column="market_price" property="marketPrice" />
    <result column="integral_price" property="integralPrice" />
    <result column="cash_price" property="cashPrice" />
    <result column="goods_stock" property="goodsStock" />
    <result column="virtual_sales" property="virtualSales" />
    <result column="actual_sales" property="actualSales" />
    <result column="main_spec_id" property="mainSpecId" />
    <result column="is_self" property="isSelf" />
    <result column="state" property="state" />
    <result column="is_recommend" property="isRecommend" />
    <result column="online_time" property="onlineTime" />
    <result column="store_id" property="storeId" />
    <result column="store_name" property="storeName" />
    <result column="store_is_recommend" property="storeIsRecommend" />
    <result column="store_state" property="storeState" />
    <result column="main_image" property="mainImage" />
    <result column="goods_video" property="goodsVideo" />
    <result column="default_product_id" property="defaultProductId" />
    <result column="is_vat_invoice" property="isVatInvoice" />
    <result column="province_code" property="provinceCode" />
    <result column="city_code" property="cityCode" />
    <result column="create_vendor_id" property="createVendorId" />
    <result column="create_time" property="createTime" />
    <result column="update_time" property="updateTime" />
    <result column="audit_reason" property="auditReason" />
    <result column="audit_comment" property="auditComment" />
    <result column="offline_reason" property="offlineReason" />
    <result column="offline_comment" property="offlineComment" />
    <result column="spec_json" property="specJson" />
    <result column="goods_details" property="goodsDetails" />
  </resultMap>
  <!--按照主键值进行操作-->
  <sql id="pkWhere">
    WHERE `integral_goods_id` = #{primaryKey}
  </sql>
  <!--操作条件-->
  <sql id="whereCondition">
    <if test="example != null">
      <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="example.integralGoodsIdNotEquals != null">
          AND `integral_goods_id` != #{example.integralGoodsIdNotEquals}
        </if>
        <if test="example.integralGoodsIdIn != null">
          AND `integral_goods_id` in (${example.integralGoodsIdIn})
        </if>
        <if test="example.goodsName != null">
          AND `goods_name` = #{example.goodsName}
        </if>
        <if test="example.goodsNameLike != null">
          AND `goods_name` like concat('%',#{example.goodsNameLike},'%')
        </if>
        <if test="example.goodsBrief != null">
          AND `goods_brief` = #{example.goodsBrief}
        </if>
        <if test="example.marketPrice != null">
          AND `market_price` = #{example.marketPrice}
        </if>
        <if test="example.integralPrice != null">
          AND `integral_price` = #{example.integralPrice}
        </if>
        <if test="example.cashPrice != null">
          AND `cash_price` = #{example.cashPrice}
        </if>
        <if test="example.goodsStock != null">
          AND `goods_stock` = #{example.goodsStock}
        </if>
        <if test="example.virtualSales != null">
          AND `virtual_sales` = #{example.virtualSales}
        </if>
        <if test="example.actualSales != null">
          AND `actual_sales` = #{example.actualSales}
        </if>
        <if test="example.mainSpecId != null">
          AND `main_spec_id` = #{example.mainSpecId}
        </if>
        <if test="example.isSelf != null">
          AND `is_self` = #{example.isSelf}
        </if>
        <if test="example.state != null">
          AND `state` = #{example.state}
        </if>
        <if test="example.stateIn != null">
          AND `state` in (${example.stateIn})
        </if>
        <if test="example.stateNotIn != null">
          AND `state` not in (${example.stateNotIn})
        </if>
        <if test="example.stateNotEquals != null">
          AND `state` != #{example.stateNotEquals}
        </if>
        <if test="example.isRecommend != null">
          AND `is_recommend` = #{example.isRecommend}
        </if>
        <if test="example.onlineTimeAfter != null">
          AND `online_time` <![CDATA[ >= ]]> #{example.onlineTimeAfter}
        </if>
        <if test="example.onlineTimeBefore != null">
          AND `online_time` <![CDATA[ <= ]]> #{example.onlineTimeBefore}
        </if>
        <if test="example.storeId != null">
          AND `store_id` = #{example.storeId}
        </if>
        <if test="example.storeName != null">
          AND `store_name` = #{example.storeName}
        </if>
        <if test="example.storeNameLike != null">
          AND `store_name` like concat('%',#{example.storeNameLike},'%')
        </if>
        <if test="example.storeIsRecommend != null">
          AND `store_is_recommend` = #{example.storeIsRecommend}
        </if>
        <if test="example.storeState != null">
          AND `store_state` = #{example.storeState}
        </if>
        <if test="example.storeStateIn != null">
          AND `store_state` in (${example.storeStateIn})
        </if>
        <if test="example.storeStateNotIn != null">
          AND `store_state` not in (${example.storeStateNotIn})
        </if>
        <if test="example.storeStateNotEquals != null">
          AND `store_state` != #{example.storeStateNotEquals}
        </if>
        <if test="example.mainImage != null">
          AND `main_image` = #{example.mainImage}
        </if>
        <if test="example.goodsVideo != null">
          AND `goods_video` = #{example.goodsVideo}
        </if>
        <if test="example.defaultProductId != null">
          AND `default_product_id` = #{example.defaultProductId}
        </if>
        <if test="example.isVatInvoice != null">
          AND `is_vat_invoice` = #{example.isVatInvoice}
        </if>
        <if test="example.provinceCode != null">
          AND `province_code` = #{example.provinceCode}
        </if>
        <if test="example.cityCode != null">
          AND `city_code` = #{example.cityCode}
        </if>
        <if test="example.createVendorId != null">
          AND `create_vendor_id` = #{example.createVendorId}
        </if>
        <if test="example.createTimeAfter != null">
          AND `create_time` <![CDATA[ >= ]]> #{example.createTimeAfter}
        </if>
        <if test="example.createTimeBefore != null">
          AND `create_time` <![CDATA[ <= ]]> #{example.createTimeBefore}
        </if>
        <if test="example.updateTimeAfter != null">
          AND `update_time` <![CDATA[ >= ]]> #{example.updateTimeAfter}
        </if>
        <if test="example.updateTimeBefore != null">
          AND `update_time` <![CDATA[ <= ]]> #{example.updateTimeBefore}
        </if>
        <if test="example.auditReason != null">
          AND `audit_reason` = #{example.auditReason}
        </if>
        <if test="example.auditReasonLike != null">
          AND `audit_reason` like concat('%',#{example.auditReasonLike},'%')
        </if>
        <if test="example.auditComment != null">
          AND `audit_comment` = #{example.auditComment}
        </if>
        <if test="example.offlineReason != null">
          AND `offline_reason` = #{example.offlineReason}
        </if>
        <if test="example.offlineReasonLike != null">
          AND `offline_reason` like concat('%',#{example.offlineReasonLike},'%')
        </if>
        <if test="example.offlineComment != null">
          AND `offline_comment` = #{example.offlineComment}
        </if>
        <if test="example.specJson != null">
          AND `spec_json` = #{example.specJson}
        </if>
        <if test="example.goodsDetails != null">
          AND `goods_details` = #{example.goodsDetails}
        </if>
        <if test="example.labelId != null">
          AND `integral_goods_id` in (SELECT `goods_id` FROM `integral_goods_bind_label` WHERE `label_id1` = #{example.labelId})
        </if>
        <if test="example.productCodeLike != null">
          AND `integral_goods_id` in (select `goods_id` from `integral_product` where `product_code` like concat('%',#{example.productCodeLike},'%'))
        </if>
        <if test="example.barCodeLike != null">
          AND `integral_goods_id` in (select `goods_id` from `integral_product` where `bar_code` like concat('%',#{example.barCodeLike},'%'))
        </if>
      </trim>
    </if>
  </sql>
  <!--排序条件-->
  <sql id="orderBy">
    ORDER BY `integral_goods_id` DESC
  </sql>
  <sql id="orderByOther">
    order by ${example.orderBy}
  </sql>
  <!--分组条件-->
  <sql id="groupBy">
    group by ${example.groupBy}
  </sql>
  <!--分页条件-->
  <sql id="limit">
    <if test="size != null and size &gt; 0">
      limit #{startRow},#{size}
    </if>
  </sql>
  <!--查询符合条件的记录数-->
  <select id="countByExample" parameterType="com.slodon.b2b2c.integral.example.IntegralGoodsExample" resultType="java.lang.Integer">
    SELECT
      COUNT(*)
    FROM `integral_goods`
    <include refid="whereCondition" />
  </select>
  <!--根据主键查询记录-->
  <select id="getByPrimaryKey" resultMap="resultMap">
    SELECT
      *
    FROM `integral_goods`
    <include refid="pkWhere" />
  </select>
  <!--查询符合条件的记录(所有字段)-->
  <select id="listByExample" resultMap="resultMap">
    SELECT
      *
    FROM `integral_goods`
    <include refid="whereCondition" />
    <if test="example.groupBy != null">
      <include refid="groupBy" />
    </if>
    <choose>
      <when test="example.orderBy != null">
        <include refid="orderByOther" />
      </when>
      <otherwise>
        <include refid="orderBy" />
      </otherwise>
    </choose>
  </select>
  <!--分页查询符合条件的记录(所有字段)-->
  <select id="listPageByExample" resultMap="resultMap">
    SELECT
      *
    FROM `integral_goods`
    <include refid="whereCondition" />
    <if test="example.groupBy != null">
      <include refid="groupBy" />
    </if>
    <choose>
      <when test="example.orderBy != null">
        <include refid="orderByOther" />
      </when>
      <otherwise>
        <include refid="orderBy" />
      </otherwise>
    </choose>
    <include refid="limit" />
  </select>
  <!--查询符合条件的记录(指定字段)-->
  <select id="listFieldsByExample" resultMap="resultMap">
    SELECT
      ${fields}
    FROM `integral_goods`
    <include refid="whereCondition" />
    <if test="example.groupBy != null">
      <include refid="groupBy" />
    </if>
    <choose>
      <when test="example.orderBy != null">
        <include refid="orderByOther" />
      </when>
      <otherwise>
        <include refid="orderBy" />
      </otherwise>
    </choose>
  </select>
  <!--分页查询符合条件的记录(指定字段)-->
  <select id="listFieldsPageByExample" resultMap="resultMap">
    SELECT
      ${fields}
    FROM `integral_goods`
    <include refid="whereCondition" />
    <if test="example.groupBy != null">
      <include refid="groupBy" />
    </if>
    <choose>
      <when test="example.orderBy != null">
        <include refid="orderByOther" />
      </when>
      <otherwise>
        <include refid="orderBy" />
      </otherwise>
    </choose>
    <include refid="limit" />
  </select>
</mapper>